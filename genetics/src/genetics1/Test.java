package genetics1;

public class Test {

	/**
	  	无关数据
	  	//public static double wsLength = 10;
		//public static double wsWidth = 8;
		//public static int wsEquCount = 10;			//设备的数量
		//public static double wsRowWidth = 2;		//车间中存放设备时每行设备的宽度
		//public static double wsFirstMargin = 1.5;	//第一行设备距离墙的宽度
		
		//种群需要用到的数据
		//***************************************************
		//public static int producePeriod = 3;		//周期
		//public static int indiCount = 50;			//个体数量（每期初始产生多少个1-8的编码）
		//public static int screenCount = 100;		//选择变异的次数
		//public static double variationRate = 0.5;		//变异概率
		
		//计算时需要用到的数据
		//public static double b1 = 0.4;
		//public static double b2 = 0.3;
		//public static double b3 = 0.3;
		//public static double TR = 500;				//设备重置时需要用到的TR
		//public static double T = 500;				//罚函数
	
		//混沌迭代时需要用到的数据
		//public static int resuleIteratorCount = 50;
		//public static double u = 4;
		//public static int m = 3;
	 */
	
	
	
	
	
	//设备需要的数据
	//***************************************************
	public static double[] equLength = 
			new double[]{1.2, 0.5, 1.7, 0.7, 1.0, 0.8, 0.5, 1.4, 0.8, 1.2};
	public static double[] equWidth = 
			new double[]{1.0, 0.4, 0.8, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.6};
	public static double[] equWallMargin = 
			new double[]{1.0, 2.0, 1.5, 1.5, 1.3, 1.2, 1 , 1.8, 2, 1};
	public static double[] cost = 
			new double[]{120, 50, 160, 40, 90, 60, 40, 100, 70, 60};
	
	
	//设备间关系需要的数据
	//***************************************************
	public static double[][] equMargin = 
			new double[][]{ {0.0, 1.0, 1.8, 1.8, 1.2, 1.4, 2.0, 1.3, 1.2, 1.0},
							{1.0, 0.0, 2.0, 2.0, 1.0, 1.5, 1.7, 1.6, 1.5, 1.0},
							{1.8, 2.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.5, 1.3, 1.0},
							{1.8, 2.0, 1.0, 0.0, 1.0, 2.0, 1.8, 1.8, 1.0, 1.0},
							{1.2, 1.0, 1.0, 1.0, 0.0, 1.7, 1.0, 1.7, 2.0, 1.0},
							{1.4, 1.5, 2.0, 2.0, 1.7, 0.0, 2.0, 1.0, 1.0, 1.0},
							{2.0, 1.7, 1.0, 1.8, 1.0, 2.0, 0.0, 1.2, 1.0, 1.0},
							{1.3, 1.6, 1.5, 1.8, 1.7, 1.0, 1.2, 0.0, 1.8, 1.0},
							{1.2, 1.5, 1.3, 1.0, 2.0, 1.0, 1.0, 1.8, 0.0, 1.0},
							{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,0.0}};
	public static double[][] P = 
			new double[][]{ {0.0, 0.5, 0.2, 0.3, 0.3, 0.5, 0.3, 0.4, 0.3, 0.5},
							{0.5, 0.0, 0.6, 0.5, 0.5, 0.4, 0.3, 0.4, 0.2, 0.5},
							{0.2, 0.6, 0.0, 0.4, 0.3, 0.2, 0.6, 0.2, 0.3, 0.6},
							{0.3, 0.5, 0.4, 0.0, 0.5, 0.4, 0.2, 0.3, 0.2, 0.5},
							{0.3, 0.5, 0.3, 0.5, 0.0, 0.5, 0.5, 0.6, 0.4, 0.3},
							{0.5, 0.4, 0.2, 0.4, 0.5, 0.0, 0.5, 0.3, 0.3, 0.2},
							{0.3, 0.3, 0.6, 0.2, 0.2, 0.5, 0.0, 0.5, 0.4, 0.4},
							{0.4, 0.4, 0.2, 0.3, 0.6, 0.3, 0.5, 0.0, 0.3, 0.2},
							{0.3, 0.2, 0.3, 0.2, 0.4, 0.3, 0.4, 0.3, 0.0, 0.2},
							{0.5, 0.5, 0.6, 0.5, 0.3, 0.2, 0.4, 0.2, 0.2, 0.0}};
	public static double[][] Q1 = 
			new double[][]{ {0, 330, 200, 0,   0,  0,  0,  0,  0,  0  },
							{0, 0,   0,   240, 90, 0,  0,  0,  0,  0  },
							{0, 0,   0,   150, 50, 0,  0,  0,  0,  0  },
							{0, 0,   0,   0,   230,100,0,  60, 0,  0  },
							{0, 0,   0,   0,   0,  370,0,  0,  0,  0  },
							{0, 0,   0,   0,   0,  0,  60, 410,0,  0  },
							{0, 0,   0,   0,   0,  0,  0,  0,  60, 0  },
							{0, 0,   0,   0,   0,  0,  0,  0,  470,0  },
							{0, 0,   0,   0,   0,  0,  0,  0,  0,  530},
							{0, 0,   0,   0,   0,  0,  0,  0,  0,  0  }};
	public static double[][] Q2 = 
			new double[][]{ {0, 0, 43, 0,   0,    0,   0,  0 ,  0,   0 },
							{0, 0, 0,  240, 0,    0,   0,  0,   0,   0 },
							{0, 0, 0,  250, 180,  0,   0,  0 ,  0,   0 },
							{0, 0, 0,  0,   490,  0,   0,  0 ,  0,   0 },
							{0, 0, 0,  0,   0,    670, 0,  0 ,  0,   0 },
							{0, 0, 0,  0,   0,    0,   200,370, 100, 0 },
							{0, 0, 0,  0,   0,    0,   0,  100, 100, 0 },
							{0, 0, 0,  0,   0,    0,   0,  0 ,  470, 0 },
							{0, 0, 0,  0,   0,    0,   0,  0 ,  0,   670},
							{0, 0, 0,  0,   0,    0,   0,  0 ,  0,   0}};
	
	public static double[][] Q3 = 
			new double[][]{ {0, 150,   50,  580,  0,   0,  0,   0,   0,  0  },
							{0,  0,    100, 50,   0,   0,  0,   0,   0,  0  },
							{0,  0,    0,   0,   150,  0,  0,   0,   0,  0  },
							{0,  0,    0,   0,   500,  130,0,   0,   0,  0  },
							{0,  0,    0,   0,   0,    510,140, 0,   0,  0  },
							{0,  0,    0,   0,   0,    0,  100, 540, 0,  0  },
							{0,  0,    0,   0,   0,    0,  0,   0,   240,0  },
							{0,  0,    0,   0,   0,    0,  0,   0,   0,  540},
							{0,  0,    0,   0,   0,    0,  0,   0,   0,  240},
							{0,  0,    0,   0,   0,    0,  0,   0,   0,  0  },
							};
	
	
	
	
	
	
	
}






































































